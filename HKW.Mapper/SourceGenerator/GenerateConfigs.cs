using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Text;
using HKW.SourceGeneratorUtils;
using Microsoft.CodeAnalysis;

namespace HKW.HKWMapper.SourceGenerator;

internal class GenerateConfigs
{
    public static void Execute(
        GeneratorExecutionContext executionContext,
        HashSet<INamedTypeSymbol> configs
    )
    {
        if (configs.Count == 0)
            return;
        var x = new GenerateConfigs() { ExecutionContext = executionContext };
        x.Generate(configs);
    }

    public GeneratorExecutionContext ExecutionContext { get; set; }

    private void Generate(HashSet<INamedTypeSymbol> configs)
    {
        var stringStream = new StringWriter();
        var writer = new IndentedTextWriter(stringStream, "\t");
        writer.WriteLine("// <auto-generated>");
        writer.WriteLine("#nullable enable");
        writer.WriteLine("#pragma warning disable CS1591");
        writer.WriteLine();
        var configsByNameSpace = new Dictionary<INamespaceSymbol, List<INamedTypeSymbol>>(
            SymbolEqualityComparer.Default
        );

        foreach (var config in configs)
        {
            if (
                configsByNameSpace.TryGetValue(config.ContainingNamespace, out var iconfigs)
                is false
            )
                iconfigs = configsByNameSpace[config.ContainingNamespace] = [];
            iconfigs.Add(config);
        }

        foreach (var pair in configsByNameSpace)
        {
            writer.WriteLine($"namespace {pair.Key}");
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine($"public static partial class MapperConfigs");
            writer.WriteLine("{");
            writer.Indent++;
            foreach (var config in pair.Value)
            {
                var fieldName = $"_{config.Name.FirstLetterToLower()}";
                writer.WriteLine(CommonData.GeneratedCodeAttribute);
                writer.WriteLine($"private static {config.Name}? {fieldName};");
                writer.WriteLine(CommonData.GeneratedCodeAttribute);
                writer.WriteLine(
                    $"{config.GetAccessibilityString()} static {config.Name} {config.Name} => {fieldName} ?? ({fieldName} = new {config.GetFullName()}().Frozen()); "
                );
            }
            writer.Indent--;
            writer.WriteLine("}");
            writer.Indent--;
            writer.WriteLine("}");
        }
        ExecutionContext.AddSource($"MapperConfigs.g.cs", stringStream.ToString());
    }
}
