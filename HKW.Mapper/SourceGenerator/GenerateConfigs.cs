using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Text;
using HKW.SourceGeneratorUtils;
using Microsoft.CodeAnalysis;

namespace HKW.HKWMapper.SourceGenerator;

internal class GenerateConfigs
{
    public static void Execute(
        GeneratorExecutionContext executionContext,
        HashSet<INamedTypeSymbol> configs
    )
    {
        if (configs.Count == 0)
            return;
        var x = new GenerateConfigs() { ExecutionContext = executionContext };
        x.Generate(configs);
    }

    public GeneratorExecutionContext ExecutionContext { get; set; }

    private void Generate(HashSet<INamedTypeSymbol> configs)
    {
        var stringStream = new StringWriter();
        var writer = new IndentedTextWriter(stringStream, "\t");
        writer.WriteLine("// <auto-generated>");
        writer.WriteLine("#nullable enable");
        writer.WriteLine("#pragma warning disable CS1591");
        writer.WriteLine();
        foreach (var config in configs)
        {
            writer.WriteLine($"namespace {config.ContainingNamespace}");
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine($"public static partial class MapperExtensions");
            writer.WriteLine("{");
            writer.Indent++;
            var typeFullName = config.GetFullName();
            var fullName = typeFullName.Replace('.', '_');
            var fieldName = $"_{fullName}";
            writer.WriteLine(CommonData.GeneratedCodeAttribute);
            writer.WriteLine($"private static {typeFullName}? {fieldName};");
            writer.WriteLine(CommonData.GeneratedCodeAttribute);
            writer.WriteLine(
                $"{config.GetAccessibilityString()} static {typeFullName} {fullName} => {fieldName} ?? ({fieldName} = ({typeFullName})new {typeFullName}().Frozen()); "
            );
            writer.Indent--;
            writer.WriteLine("}");
            writer.Indent--;
            writer.WriteLine("}");
        }
        ExecutionContext.AddSource($"MapperConfigs.g.cs", stringStream.ToString());
    }
}
