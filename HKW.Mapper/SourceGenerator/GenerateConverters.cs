using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Text;
using HKW.SourceGeneratorUtils;
using Microsoft.CodeAnalysis;

namespace HKW.HKWMapper.SourceGenerator;

internal class GenerateConverters
{
    public static void Execute(
        GeneratorExecutionContext executionContext,
        HashSet<INamedTypeSymbol> converters
    )
    {
        var x = new GenerateConverters() { ExecutionContext = executionContext };
        x.Generate(converters);
    }

    public GeneratorExecutionContext ExecutionContext { get; set; }

    private void Generate(HashSet<INamedTypeSymbol> converters)
    {
        var stringStream = new StringWriter();
        var writer = new IndentedTextWriter(stringStream, "\t");
        writer.WriteLine("// <auto-generated>");
        writer.WriteLine("#nullable enable");
        writer.WriteLine("#pragma warning disable CS1591");
        writer.WriteLine();
        foreach (var converter in converters)
        {
            writer.WriteLine($"namespace {converter.ContainingNamespace}");
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine($"public static partial class MapperExtensions");
            writer.WriteLine("{");
            writer.Indent++;
            var typeFullName = converter.GetFullName();
            var fullName = typeFullName.Replace('.', '_');
            var fieldName = $"_{fullName}";
            writer.WriteLine(CommonData.GeneratedCodeAttribute);
            writer.WriteLine($"private static {typeFullName}? {fieldName};");
            writer.WriteLine(CommonData.GeneratedCodeAttribute);
            writer.WriteLine(
                $"{converter.GetAccessibilityString()} static {typeFullName} {fullName} => {fieldName} ?? ({fieldName} = new {typeFullName}()); "
            );
            writer.Indent--;
            writer.WriteLine("}");
            writer.Indent--;
            writer.WriteLine("}");
        }
        ExecutionContext.AddSource($"MapperConverters.g.cs", stringStream.ToString());
    }
}
